#!/usr/bin/env node

var path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('who-is-in-my-train:server');
var http = require('http');

var schedule = require('node-schedule');

/**
 * Get port from environment and store in Express.
 */

var port = require('env-port')('8889');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Start server
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log(require('server-welcome')(port, 'Who is in my train'));

// Get trains
//getLine();
schedule.scheduleJob('0 0 */12 * * *', function () {
  getLine();
});


/**
 * Get line inforamtions
 */
var getTrains = require('../lib/get-trains')
var fs = require('fs');
var trainsConfig = require('../public/trains-config.json');

function getLine() {
  getTrains(trainsConfig.station1, trainsConfig.station2, new Date(), 5 * 24 * 60 * 60 * 1000, function (err, data) {
    if (!err) {
      fs.writeFile(path.resolve(__dirname, '../public/trains-1-to-2.json'), JSON.stringify(data), 'utf8', function () { });
    }
  });
  getTrains(trainsConfig.station2, trainsConfig.station1, new Date(), 5 * 24 * 60 * 60 * 1000, function (err, data) {
    if (!err) {
      fs.writeFile(path.resolve(__dirname, '../public/trains-2-to-1.json'), JSON.stringify(data), 'utf8', function () { });
    }
  });
}


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}